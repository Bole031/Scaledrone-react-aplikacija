{"version":3,"sources":["components/Messages.js","components/Input.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Messages","props","korisnik","poruke","ispisiPoruke","message","member","text","stil","id","stilPoruka","sadrzajStil","className","clientData","username","random","float","map","el","Input","onPoruka","useState","setText","onSubmit","e","preventDefault","onFormSubmit","type","onChange","event","target","value","placeholder","autoFocus","Footer","App","state","require","randomName","color","randomColor","handlePoruka","drone","publish","room","window","Scaledrone","data","on","error","console","clientId","setState","subscribe","push","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86b199fe.chunk.js","sourcesContent":["/* koristimo npm paket random da bi generirali index za svakog clana liste */\r\nimport random from \"random\";\r\n\r\nfunction randomId(){\r\n    \r\n    const id = random.float();\r\n    return id;\r\n}\r\n\r\nfunction Messages(props){\r\n\r\n    const { korisnik } = props;\r\n    const { poruke } = props;\r\n\r\n    /* funckija prima svaku poruku iz niza poruke iz stanja App komponente i stavlja ih u jednog clana liste */\r\n    /* radimo destrukciju objekta message da bi izvukli podatke o trenutnom korisniku i podatke poruke */\r\n    /* posto smo member.id dodali u stanje korisnik trenutni korisnik mora imati isti id kao korisnik unutar scaledrone clienta\r\n    - pomocu toga dodjeljujemo stilove koje prima lista */\r\n    const ispisiPoruke = (message) => {\r\n        const { member, text } = message;\r\n        const stil = member.id === korisnik.id ? \"poruka-trenutni-korisnik\" : \"poruka\";\r\n        const stilPoruka = member.id === korisnik.id ? \"boja-poruke-trenutni\" : \"boja-poruke\";\r\n        const sadrzajStil = member.id === korisnik.id ? \"poruka-sadrzaj-trenutni\" : \"poruka-sadrzaj\";\r\n        return(\r\n            <li className={stil} key={randomId()}>\r\n                <div className={sadrzajStil}>\r\n                    <div className=\"username\">\r\n                        {member.clientData.username}\r\n                    </div>\r\n                    <div className={stilPoruka}> \r\n                        <p>{text}</p>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        )\r\n    };\r\n\r\n    /* uzimamo props poruke iz App komponente i sa map() metodom prolazimo kroz sve clanove niza poruke i saljemo ih u gore definiranu funkciju */\r\n    return(\r\n        <div className=\"lista-div\">\r\n            <ul className=\"lista-poruka\">\r\n                {poruke.map(el => ispisiPoruke(el))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","/* definiramo stanje unutar komponente kako bi mogli spremiti vrjednost koju korisnik upise u polje za unos */\r\nimport { useState } from \"react\";\r\n\r\nfunction Input(props){\r\n    const { onPoruka } = props;\r\n\r\n    const [text, setText] = useState(\"\");\r\n    \r\n    /* mjenjamo stanje u vrjednost koju korisnik unese */\r\n    const handleValueChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    /* sa ovom funkcijom prekidamo uobicajnu radnju form elementa tako sto ne saljemo podatke nigdje */\r\n    /* praznimo stanje komponente za buduce unose */\r\n    /* stavljamo funckiju uz propsa unutar ove funkcije da bi poslali poruku u stanje komponente */\r\n    const onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        setText(\"\");\r\n        onPoruka(text);\r\n    }\r\n    \r\n    /* stavljamo u form element da bi korisnik mogao pritiskom na tipku enter poslati poruku */\r\n    return(\r\n        <div className=\"input-div\">\r\n            <form onSubmit={e => onFormSubmit(e)} className=\"form\">\r\n                <input type=\"text\" onChange={handleValueChange} placeholder=\"Write your message\" autoFocus={true} value={text}className=\"inp\"/>\r\n                <button className=\"btn\">Send!</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","function Footer(){\r\n    return(\r\n        <div className=\"footer\">\r\n           <p>Alen Bodiš 2021.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\n\nimport { Messages, Input, Footer } from \"./components\";\n\nimport './App.css';\n\n/* postavljamo funkcije pomocu kojih generiramo nasumicno ime i boju avatara i za to koristimo npm pakete sillyname i randomcolor*/\nfunction randomName(){\n  const randomName = require(\"sillyname\");\n  const name = randomName();\n  return name;\n}\n\nfunction randomColor(){\n  const randomColor = require(\"randomcolor\");\n  const color = randomColor();\n  return color;\n}\n\nclass App extends React.Component {\n  /* state u koji spremamo poruke i podatke o korisniku */\n  state = {\n    poruke: [],\n    korisnik : {\n      username: randomName(),\n      color: randomColor()\n    }\n  }\n\n  /* unutar constructora definiramo drone-a koji dobivamo iz Scaledrone servisa */\n  /* pomocu njega omogucujemo slanje podataka i poruka */\n  /* u data spremamo podatke o trenutnom korisniku - ako otvorimo aplikaciju u vise tabova na internet pregledniku svaki tab ce simulirati jednog korisnika */\n  /* open event - definiramo sto ce se dogoditi ako dodje do pogreske i sto ce se dogoditi ako uspjesno dode do konekcije */\n  /* definiramo varijablu member koja prima objekt korisnik i stavljamo ju na pocetak obejkta kao novi dio objekta korisnik pomocu spread operatora onda memberu dodajemo id koji dobijemo od Scaledrone (clientId) */\n  /* member ubacujemo u stanje odma kada se korisnik spoji da bi lakse dosli do podataka o korisniku */\n  constructor() {\n    super();\n    this.drone = new window.Scaledrone(\"Ft2Q1ZmGCk3TmspV\", {\n      data: this.state.korisnik\n    });\n    this.drone.on(\"open\", error => {\n      if(error)\n      {\n        return console.error(error);\n      }\n      const member = {...this.state.korisnik};\n      member.id = this.drone.clientId;\n      this.setState({korisnik: member})\n    });\n   /* da bi mogli korstiti chat funkciju Scaledrone-a moramo se spojiti na sobu u kojoj ce se poruke emitirati */\n   /* drone.subscribe omogucava instanciranje sobe - soba mora imati prefiks observable da bi mogla sadrzavati informacije o pošiljatelju */\n    const room = this.drone.subscribe(\"observable-chatroom\");\n    /* koristimo message event za emitiranje poruke u sobi */\n    /* message event je objekt koji u sebi ima podatke data(poruka koja je poslana), id(unikatan index poruke), timestamp, clientId(id clienta koji je posalo poruku) i member(objekt - podaci o korisniku koji je poslao poruku) */\n    /* u ovom slucaju trebaju nam data i member */\n    /* data i member koje dobijemo iz eventa ubacujemo u stanje komponente */\n    /* message event prima podatke od drone.publisha */\n    room.on(\"message\", message => {\n      const { data, member } = message;\n      const poruke = this.state.poruke;\n      poruke.push({member, text: data});\n      this.setState({poruke: poruke});\n    })\n  }\n\n  /* funkcija koja prima poruku iz Input komponente pomocu propsa */\n  /* drone.publish omogucuje slanje poruke i unutar njega moramo navesti ime sobe i podatke koji se salju u ovom slucaju se salju podaci iz inputa */\n  handlePoruka = (message) => {\n    this.drone.publish({\n      room: \"observable-chatroom\",\n      message\n    })\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>CHAT APPLICATION</h1>\n      </div>\n      <Messages korisnik={this.state.korisnik} poruke={this.state.poruke} />\n      <Input onPoruka={this.handlePoruka} />\n      <Footer />\n    </div>\n  );}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./App.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}